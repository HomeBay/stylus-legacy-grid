$legacy-rupture-base-font-size ?= 16px
$legacy-rupture-rasterise-media-queries ?= false

$legacy-rupture = {
  rasterise-media-queries: $legacy-rupture-rasterise-media-queries
  mobile-cutoff: 400px
  desktop-cutoff: 1050px
  hd-cutoff: 1800px
  enable-em-breakpoints: false
  base-font-size: $legacy-rupture-base-font-size
  anti-overlap: false
  density-queries: 'dppx' 'webkit' 'moz' 'dpi'
  retina-density: 1.5
  use-device-width: false
}
$legacy-rupture.scale = 0 ($legacy-rupture.mobile-cutoff) 600px 800px ($legacy-rupture.desktop-cutoff) ($legacy-rupture.hd-cutoff)
$legacy-rupture.scale-names = 'xs' 's' 'm' 'l' 'xl' 'hd'

-legacy-rupture-is-string(val)
  if typeof(val) is not 'unit'
    if val is a 'string' or val is a 'ident'
      true
    else
      false
  else
    false

-legacy-rupture-get-scale-number(scale-name)
  for list-item, i in $legacy-rupture.scale-names
    if list-item is scale-name
      return i + 1
  return false

-legacy-rupture-convert-to(to-unit, value, context = $legacy-rupture.base-font-size)
  from-unit = unit(value)
  return value if to-unit is from-unit
  if to-unit in ('em' 'rem')
    return value if from-unit in ('em' 'rem')
    return unit((value / context), to-unit)
  if to-unit is 'px'
    return unit((value * context), 'px')

-legacy-rupture-on-scale(n)
  return unit(n) is ''

-legacy-rupture-larger-than-scale(n)
  return (n > (length($legacy-rupture.scale) - 1)) and -legacy-rupture-on-scale(n)

-legacy-rupture-is-zero(n)
  return n is 0

-legacy-rupture-overlap-shift(anti-overlap, n)
  shift-unit = unit(n)
  anti-overlap = 0px unless anti-overlap
  anti-overlap = 1px if anti-overlap is true
  if length(anti-overlap) is 1
    return -legacy-rupture-convert-to(shift-unit, anti-overlap)
  for val in anti-overlap
    return val if unit(val) is shift-unit

-legacy-rupture-adjust-overlap(anti-overlap, n, side = 'min')
  -shift = -legacy-rupture-overlap-shift(anti-overlap, n)
  if (side is 'min' and -shift > 0) or (side is 'max' and -shift < 0)
    n = n + -shift
  return n

-legacy-rupture-is-positive(n)
  return n >= 0

-legacy-rupture-density-queries(density)
  if typeof(density) is not 'unit'
    if not -legacy-rupture-is-string(density)
      density = '%s' % density
  density = $legacy-rupture.retina-density if density is 'retina'
  queries = ()
  for query in $legacy-rupture.density-queries
    if query is 'webkit'
      push(queries, '(-webkit-min-device-pixel-ratio: %s)' % (density))
    else if query is 'moz'
      push(queries, '(min--moz-device-pixel-ratio: %s)' % (density))
    else if query is 'o'
      push(queries, '(-o-min-device-pixel-ratio: %s/1)' % (density))
    else if query is 'ratio'
      push(queries, '(min-device-pixel-ratio: %s)' % (density))
    else if query is 'dpi'
      if -legacy-rupture-is-string(density)
        density=convert(density)
      push(queries, '(min-resolution: %sdpi)' % (round(density * 96, 1)))
    else if query is 'dppx'
      push(queries, '(min-resolution: %sdppx)' % (density))
  return queries

legacy-rupture-create-fallback-class(selected, class)
  /{'' + class + ' ' + selected}
    {block}

// +legacy-rupture-between(min, max)
// usage (scale can be mixed with custom values):
//   - +legacy-rupture-between(1, 3) scale:scale
//   - +legacy-rupture-between(0, 3) 0 width:scale
//   - +legacy-rupture-between(200px, 500px) custom:custom
//   - +legacy-rupture-between(0, 300px) 0 width:custom
//   - +legacy-rupture-between(1, 300px) scale:custom
//   - +legacy-rupture-between(200px, 4) custom:scale

legacy-rupture-between(min, max, anti-overlap = $legacy-rupture.anti-overlap, density = null, orientation = null, use-device-width = $legacy-rupture.use-device-width, fallback-class = null)
  selected = selector()

  if -legacy-rupture-is-string(orientation)
    orientation = convert(orientation)
  if -legacy-rupture-is-string(density)
    density = convert(density)
  if -legacy-rupture-is-string(min)
    min = -legacy-rupture-get-scale-number(min)
  if -legacy-rupture-is-string(max)
    max = -legacy-rupture-get-scale-number(max)

  -min = $legacy-rupture.scale[min - 1] unless -legacy-rupture-is-zero(min) or (not -legacy-rupture-on-scale(min))
  -max = $legacy-rupture.scale[max] unless not -legacy-rupture-on-scale(max)
  -min ?= min
  -max ?= max

  if ($legacy-rupture.rasterise-media-queries)
    if not (density or -max or orientation)
      {block}
  else
    condition = 'only screen'
    use-device-width = use-device-width ? 'device-' : ''
    unless -min is 0
      -min = -legacy-rupture-convert-to('em', -min) if $legacy-rupture.enable-em-breakpoints
      -min = -legacy-rupture-adjust-overlap(anti-overlap, -min, side: 'min')
      condition = condition + ' and (min-' + use-device-width + 'width: %s)' % (-min)
    unless -legacy-rupture-larger-than-scale(max)
      -max = -legacy-rupture-convert-to('em', -max) if $legacy-rupture.enable-em-breakpoints
      -max = -legacy-rupture-adjust-overlap(anti-overlap, -max, side: 'max')
      condition = condition + ' and (max-' + use-device-width + 'width: %s)' % (-max)
    if orientation
      condition = condition + ' and (orientation: %s)' % (orientation)
    if density
      conditions = ()
      for query in -legacy-rupture-density-queries(density)
        push(conditions, condition + ' and %s' % (query))
      condition = join(', ', conditions)
    @media condition
      {block}
  if fallback-class
    +legacy-rupture-create-fallback-class(selected, fallback-class)
      {block}

legacy-rupture-at(scale-point, anti-overlap = $legacy-rupture.anti-overlap, density = null, orientation = null, use-device-width = $legacy-rupture.use-device-width, fallback-class = null)
  if -legacy-rupture-is-string(orientation)
    orientation = convert(orientation)
  if -legacy-rupture-is-string(density)
    density = convert(density)
  +legacy-rupture-between(scale-point, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)
    {block}

legacy-rupture-from-width(scale-point, anti-overlap = $legacy-rupture.anti-overlap, density = null, orientation = null, use-device-width = $legacy-rupture.use-device-width, fallback-class = null)
  if -legacy-rupture-is-string(orientation)
    orientation = convert(orientation)
  if -legacy-rupture-is-string(density)
    density = convert(density)
  +legacy-rupture-between(scale-point, length($legacy-rupture.scale), anti-overlap, density, orientation, use-device-width, fallback-class)
    {block}

legacy-rupture-above = legacy-rupture-from-width

legacy-rupture-to-width(scale-point, anti-overlap = $legacy-rupture.anti-overlap, density = null, orientation = null, use-device-width = $legacy-rupture.use-device-width, fallback-class = null)
  if -legacy-rupture-is-string(orientation)
    orientation = convert(orientation)
  if -legacy-rupture-is-string(density)
    density = convert(density)
  +legacy-rupture-between(1, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)
    {block}

legacy-rupture-below = legacy-rupture-to-width

legacy-rupture-mobile(anti-overlap = $legacy-rupture.anti-overlap, density = null, orientation = null, use-device-width = $legacy-rupture.use-device-width, fallback-class = null)
  if -legacy-rupture-is-string(orientation)
    orientation = convert(orientation)
  if -legacy-rupture-is-string(density)
    density = convert(density)
  +legacy-rupture-below($legacy-rupture.mobile-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)
    {block}

legacy-rupture-tablet(anti-overlap = $legacy-rupture.anti-overlap, density = null, orientation = null, use-device-width = $legacy-rupture.use-device-width, fallback-class = null)
  if -legacy-rupture-is-string(orientation)
    orientation = convert(orientation)
  if -legacy-rupture-is-string(density)
    density = convert(density)
  +legacy-rupture-between($legacy-rupture.mobile-cutoff, $legacy-rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)
    {block}

legacy-rupture-desktop(anti-overlap = $legacy-rupture.anti-overlap, density = null, orientation = null, use-device-width = $legacy-rupture.use-device-width, fallback-class = null)
  if -legacy-rupture-is-string(orientation)
    orientation = convert(orientation)
  if -legacy-rupture-is-string(density)
    density = convert(density)
  +legacy-rupture-above($legacy-rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)
    {block}

legacy-rupture-hd(anti-overlap = $legacy-rupture.anti-overlap, density = null, orientation = null, use-device-width = $legacy-rupture.use-device-width, fallback-class = null)
  if -legacy-rupture-is-string(orientation)
    orientation = convert(orientation)
  if -legacy-rupture-is-string(density)
    density = convert(density)
  +legacy-rupture-above($legacy-rupture.hd-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)
    {block}

legacy-rupture-density(density, orientation = null, fallback-class = null)
  selected = selector()
  if not ($legacy-rupture.rasterise-media-queries)
    conditions = ()
    for query in -legacy-rupture-density-queries(density)
      condition = 'only screen and %s' % (query)
      if orientation
        condition = condition + ' and (orientation: %s)' % (orientation)
      push(conditions, condition)
    condition = join(', ', conditions)
    @media condition
      {block}
    if fallback-class
      +legacy-rupture-create-fallback-class(selected, fallback-class)
        {block}

legacy-rupture-pixel-ratio = legacy-rupture-density

legacy-rupture-retina(orientation = null, fallback-class = null)
  +legacy-rupture-density('retina', orientation, fallback-class)
    {block}

legacy-rupture-landscape(density = null, fallback-class = null)
  selected = selector()
  if not ($legacy-rupture.rasterise-media-queries)
    if -legacy-rupture-is-string(density)
      density = convert(density)
    if density
      +legacy-rupture-pixel-ratio(density, orientation: landscape, fallback-class)
        {block}
    else
      @media only screen and (orientation: landscape)
        {block}
      if fallback-class
        +legacy-rupture-create-fallback-class(selected, fallback-class)
          {block}

legacy-rupture-portrait(density = null, fallback-class = null)
  selected = selector()
  if not ($legacy-rupture.rasterise-media-queries)
    if -legacy-rupture-is-string(density)
      density = convert(density)
    if density
      +legacy-rupture-pixel-ratio(density, orientation: portrait, fallback-class)
        {block}
    else
      @media only screen and (orientation: portrait)
        {block}
      if fallback-class
        +legacy-rupture-create-fallback-class(selected, fallback-class)
          {block}

legacy-rupture-hover(density = null, orientation = null, fallback-class = null)
  condition = "only screen and (hover: hover)";
  @media ({condition})
    {block}
